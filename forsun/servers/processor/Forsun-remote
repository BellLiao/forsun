#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from forsun import Forsun
from forsun.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i16 ping()')
    print('  ForsunPlan create(string key, i16 second, i16 minute, i16 hour, i16 day, i16 month, i16 week, string action,  params)')
    print('  ForsunPlan createTimeout(string key, i16 second, i16 minute, i16 hour, i16 day, i16 month, i16 week, i16 count, string action,  params)')
    print('  ForsunPlan remove(string key)')
    print('  ForsunPlan get(string key)')
    print('   getCurrent()')
    print('   getTime(i32 timestamp)')
    print('   getKeys(string prefix)')
    print('  void forsun_call(string key, i32 ts,  params)')
    print('   info()')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = Forsun.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'create':
    if len(args) != 9:
        print('create requires 9 args')
        sys.exit(1)
    pp.pprint(client.create(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), args[7], eval(args[8]),))

elif cmd == 'createTimeout':
    if len(args) != 10:
        print('createTimeout requires 10 args')
        sys.exit(1)
    pp.pprint(client.createTimeout(args[0], eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]), eval(args[5]), eval(args[6]), eval(args[7]), args[8], eval(args[9]),))

elif cmd == 'remove':
    if len(args) != 1:
        print('remove requires 1 args')
        sys.exit(1)
    pp.pprint(client.remove(args[0],))

elif cmd == 'get':
    if len(args) != 1:
        print('get requires 1 args')
        sys.exit(1)
    pp.pprint(client.get(args[0],))

elif cmd == 'getCurrent':
    if len(args) != 0:
        print('getCurrent requires 0 args')
        sys.exit(1)
    pp.pprint(client.getCurrent())

elif cmd == 'getTime':
    if len(args) != 1:
        print('getTime requires 1 args')
        sys.exit(1)
    pp.pprint(client.getTime(eval(args[0]),))

elif cmd == 'getKeys':
    if len(args) != 1:
        print('getKeys requires 1 args')
        sys.exit(1)
    pp.pprint(client.getKeys(args[0],))

elif cmd == 'forsun_call':
    if len(args) != 3:
        print('forsun_call requires 3 args')
        sys.exit(1)
    pp.pprint(client.forsun_call(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'info':
    if len(args) != 0:
        print('info requires 0 args')
        sys.exit(1)
    pp.pprint(client.info())

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
